import React from "react";
import {
  StyleSheet,
  Text,
  SafeAreaView,
  ScrollView,
  StatusBar,
  Image,
  View,
} from "react-native";

const Set = () => {
  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView}>
          <SafeAreaView style={styles.row}>
            <SafeAreaView style={styles.header}>
              <Text style={styles.header}>ความรู้เบื้องต้นเกี่ยวกับเซต</Text>
            </SafeAreaView>
            <Text style={styles.text}>
              &emsp;นิยามของเซต เซต คือ คำที่ใช้บ่งบอกกลุ่มของสิ่งต่าง ๆ
              ทำให้ทราบว่าเมื่อพูดถึงกลุ่มใดแล้วก็จะทราบได้อย่างแน่นอนว่าสิ่งใดอยู่ในกลุ่ม
              และสิ่งใดไม่อยู่ในกลุ่ม โดยจะเรียกสิ่งที่อยู่ในเซตว่า สมาชิกของเซต
              เช่น{"\n"}
              {"\n"}
              เซตของอักษรสระในภาษาอังกฤษ หมายถึง กลุ่มของอักษร a, e, i, o, และ u
              {"\n"}
              &emsp;จำนวนสมาชิกเซต A เขียนแทนด้วย n(A){"\n"}
              &emsp;a เป็นสมาชิกของเซต A เขียนแทนด้วย a ∈ A{"\n"}
              &emsp;b ไม่เป็นสมาชิกของเซต A เขียนแทนด้วย b ∉ A{"\n"}
              {"\n"}
              &emsp;การเขียนเซต เซตสามารถเขียนได้สองแบบคือ แบบแจกแจงสมาชิก กับ
              แบบมีเงื่อนไข{"\n"}
              &emsp;แบบแจกแจงสมาชิก แสดงสมาชิกทุกตัวที่อยู่ในเซตนั้นในวงเล็บ{" "}
              {"{"}
              {"}"} คั่นด้วยเครื่องหมาย , เช่น A = {"{"} a, b, c, d, f {"}"}
              {"\n"}
              &emsp;แบบบอกเงื่อนไข แสดงสมาชิกโดยการเขียนเป็นเงื่อนใข ในรูป {"{"}
              สมาชิก I เงื่อนไข{"}"} เช่น B ={"{"} 2, 4, 6, 8 |
              จำนวนเต็มคู่บวกที่น้อยกว่า 10 {"}"}
              {"\n"}
              &emsp;ชนิดของเซต{"\n"}
              1. เซตอนันต์ มีจำนวนสมาชิกมากไม่มีสิ้นสุด เช่น เซตของจำนวนเต็มบวก
              = {"{"} 1, 2, 3, 4, … {"}"}
              {"\n"}
              2. เซตจำกัด สามารถบอกจำนวนสมาชิกได้ เช่น เซตของชื่อวันในสัปดาห์ =
              {"{"} วันจันทร์, วันอังคาร, วันพุธ, … , วันเสาร์, วันอาทิตย์ {"}"}
              {"\n"}
              3. เซตว่าง (∅, {"{"}
              {"}"}) เป็นเซตที่ไม่มีสมาชิกเลย และเซตว่างก็นับว่าเป็นเซตจำกัด
              {"\n"}
              {"\n"}
              &emsp;การเท่ากันของเซต การเท่ากันของเซต จะต้องมีจำนวนสมาชิกเท่ากัน
              และสมาชิกเหมือนกันทุกตัว (สลับที่สมาชิกได้)
              สมาชิกที่ซ้ำกันจะนับเป็นตัวเดียวกันไม่นับซ้ำ เขียนแทนด้วย A = B
              {"\n"}
              {"\n"}
              &emsp;เอกภพสัมพัทธ์ คือ ขอบเขตที่เราสนใจ สมาชิกทุกตัวของเซตต่าง ๆ
              จะต้องอยู่ในเอกภพสัมพัทธ์ มักใช้สัญลักษณ์ U{"\n"}
              {"\n"}
              &emsp;สับเซต A เป็นสับเซตของ B แปลว่าสมาชิกทุกตัวของ A
              ต้องมีอยู่ใน B จะเป็นเซตที่เท่ากันเลยก็ได้
              (เซตว่างเป็นสับเซตของทุกเซต มีสัญลักษณ์การเป็น และไม่เป็นสับเซต
              คือ ⊂, ⊄ ตามลำดับ) เช่น กำหนดให้
              {"\n"}A = {"{"} 1, 2, 3, 4, 5 {"}"}
              {"\n"}B = {"{"} 2, 4 {"}"}
              {"\n"}C = {"{"} 3, 5, 7 {"}"}
              {"\n"}
              &emsp;ดังนั้น B ⊂ A แต่ C ⊄ A{"\n"}
              {"\n"}
              &emsp;สมบัติเกี่ยวกับสับเซตที่น่าสนใจ{"\n"}
              1. ถ้า A ⊂ B และ B ⊂ A แล้ว A = B{"\n"}
              2. ถ้า A ⊂ B และ B ⊂ C แล้ว A ⊂ C{"\n"}
              3. เซตทุกเซตเป็นสับเซตของตัวเอง คือ ถ้า A เป็นเซตใดๆ แล้ว A ⊂ A
              {"\n"}
              4. เซตว่างเป็นสับเซตของทุกเซต คือ ถ้า A เป็นเซตใดๆ แล้ว ∅ ⊂ A
              {"\n"}
              5. ถ้า n(A) = n แล้ว จำนวนสับเซตของเซต A เท่ากับ 2n สับเซต{"\n"}
              {"\n"}
              &emsp;พาวเวอร์เซตของ A เขียนแทนด้วย P(A) หมายถึง
              เซตของสับเซตทั้งหมดของ A และจำนวนของสมาชิกของพาวเวอร์เซตหาได้จาก
              n(P(A))= 2n{"\n"}
              เช่น กำหนดให้ A = {"{"} 1, 2 {"}"} จงหาสับเซต และพาวเวอร์เซตของ A
              {"\n"}
              &emsp;วิธีทำ{"\n"}
              สับเซตทั้งหมดของ A คือ ∅, {"{"}1{"}"}, {"{"}2{"}"}, {"{"}1,2{"}"}
              {"\n"}
              ดังนั้น พาวเวอร์เซตของ P(A) = {"{"} ∅, {"{"}1{"}"}, {"{"}2{"}"},{" "}
              {"{"}1,2{"}"} {"}"}
              {"\n"}
              n(P(A))= 2n = 22 = 4{"\n"}
              {"\n"}
              &emsp;สมบัติเกี่ยวกับพาวเวอร์เซตที่น่าสนใจ เมื่อ A, B, X
              เป็นเซตใดๆ
              {"\n"}
              1. X ∈ P(A) ก็ต่อเมื่อ X ⊂ A{"\n"}
              2. A ∈ P(A){"\n"}
              3. สำหรับทุกเซต A ใดๆ จะได้ว่า ∅ ∈ P(A) และ ∅ ⊂ P(A) ด้วย{"\n"}
              4. P(A) ≠ ∅ สำหรับทุกๆเซต A{"\n"}
              5. P(∅) = {"{"}∅{"}"}
              {"\n"}
              6. A ⊂ B ก็ต่อเมื่อ P(A) ⊂ P(B){"\n"}
              7. ถ้า A เป็นเซตจำกัด ซึ่ง n(A) = n แล้ว n(P(A)) = 2^n{"\n"}
              8. ถ้า A เป็นเซตอนันต์ แล้ว P(A) เป็นเซตอนันต์
            </Text>
          </SafeAreaView>
          <SafeAreaView style={styles.row}>
            <SafeAreaView style={styles.header}>
              <Text style={styles.header}>แผนภาพเวนน์ออยเลอร์</Text>
            </SafeAreaView>
            <Text style={styles.text}>
              &emsp;การใช้แผนภาพเวนน์ออยเลอร์
              จะวาดรูปเซตเป็นวงกลมและวาดเอกภพสัมพัทธ์ (U)
              เป็นสี่เหลี่ยมที่ล้อมวงกลมไว้ ตัวอย่างเช่น
            </Text>
            <Text style={styles.text}>สมาชิกทุกตัวของ A เป็นสมาชิกของ B</Text>
            <Image
              style={{ width: 300, height: 300, alignSelf: "center" }}
              source={require("../assets/union.png")}
            />
            <Text style={styles.text}>
              ไม่มีสมาชิกตัวใดของ A เป็นสมาชิกของ B
            </Text>
            <Image
              style={{
                width: 300,
                height: 300,
                alignSelf: "center",
              }}
              source={require("../assets/nothing.png")}
            />
            <Text style={styles.text}>สมาชิกบางตัวของ A เป็นสมาชิกของ B</Text>
            <Image
              style={{
                width: 300,
                height: 300,
                alignSelf: "center",
              }}
              source={require("../assets/intersect.png")}
            />
          </SafeAreaView>
          <SafeAreaView style={styles.row}>
            <SafeAreaView style={styles.header}>
              <Text style={styles.header}>การดำเนินการระหว่างเซต</Text>
            </SafeAreaView>
            <Text style={styles.text}>
              &emsp;ยูเนียน (∪) A ∪ B คือ เซตของสมาชิกทั้งหมดของ A
              รวมกับสมาชิกทั้งหมดของ B โดยตัวซ้ำนับเป็นตัวเดียว{"\n"}
              &emsp;อินเตอร์เซกชัน (∩) A ∩ B คือ เซตของสมาชิกทั้งหมดของ A และ B
              ที่ซ้ำกัน{"\n"}
              &emsp;ผลต่างระหว่างเซต (-) A – B คือ เซตของสมาชิกทั้งหมดของ A
              แต่ไม่เป็นสมาชิกของ B{"\n"}
              &emsp;คอมพลีเมนต์ (') A' คือ เซตของสมาชิกทั้งหมดของเอกภพสัมพัทธ์
              แต่ไม่เป็นสมาชิกของเซต A{"\n"}
              {"\n"}
              ตัวอย่าง กำหนดให้
              {"\n"}U = {"{"}1, 2, 3, 4, 5, 6, 7, 8, 9{"}"}
              {"\n"}A = {"{"}2, 4, 6, 8{"}"}
              {"\n"}B = {"{"}2, 3, 5, 7{"}"}
              {"\n"}
              {"\n"}
              ดังนั้น{"\n"}A ∪ B = {"{"}2, 3, 4, 5, 6, 7{"}"}
              {"\n"}A ∩ B = {"{"}2{"}"}
              {"\n"}A – B = {"{"}4, 6, 8{"}"}
              {"\n"}B – A = {"{"}3, 5, 7{"}"}
              {"\n"}
              A’ = {"{"}1, 3, 5, 7, 9{"}"}
              {"\n"}
              B’ = {"{"}1, 4, 6, 8, 9{"}"}
            </Text>
          </SafeAreaView>
          <SafeAreaView style={styles.row}>
            <SafeAreaView style={styles.header}>
              <Text style={styles.header}>
                คุณสมบัติของการดำเนินการระหว่างเซต
              </Text>
            </SafeAreaView>
            <Text style={styles.text}>
              1. (A ∪ B)' = A' ∩ B'{"\n"}
              2. (A ∩ B)' = A' ∪ B'{"\n"}
              3. (A ∩ B) ∪ C = (A ∪ C) ∩ (B ∪ C){"\n"}
              4. (A ∪ B) ∩ C = (A ∩ C) ∪ (B ∩ C)
            </Text>
          </SafeAreaView>
          <SafeAreaView style={styles.row}>
            <SafeAreaView style={styles.header}>
              <Text style={styles.header}>การแก้ปัญหาโดยใช้เซต</Text>
            </SafeAreaView>
            <Text style={styles.text}>
              1. n(B – A) = n(B) – n(A ∩ B){"\n"}
              2. n(A ∪ B) = n(A) + n(B) – n(A ∩ B){"\n"}
              3. n(A ∪ B ∪ C) = n(A) + n(B) + n(C) – n(A ∩ B) – n(A ∩ C) – n(B ∩
              C) + n(A ∩ B ∩ C){"\n"}
              {"\n"}
              ตัวอย่าง นักเรียนชั้น ม.4 ในโรงเรียนแห่งหนึ่งมีจำนวน 100
              คนได้รับรางวัลเรียนดี 30 คน ได้รับรางวัลมารยาทดี 50 คน
              ในจำนวนนี้ได้รับรางวัลทั้งสองประเภท 20 คน จงหา{"\n"}
              &emsp;จำนวนนักเรียนทั้งหมดที่ได้รับรางวัล
              &emsp;จำนวนนักเรียนที่ไม่ได้รับรางวัลใดๆเลย{"\n"}
              {"\n"}
              วีธีทำ{"\n"}
              &emsp;ให้ A แทนเซตนักเรียนที่ได้รับรางวัลเรียนดี{"\n"}
              &emsp;ให้ B แทนเซตนักเรียนที่ได้รับรางวัลมารยาทดี{"\n"}
              {"\n"}
              จากโจทย์จะได้ n(U) = 100, n(A) = 30, n(B) = 50, n(A ⋂ B) = 20
              {"\n"}
              จำนวนนักเรียนทั้งหมดที่ได้รับรางวัลเขียนแทนด้วย n(A ⋃ B){"\n"}
              &emsp;จาก n(A ⋃ B) = n(A) + n(B) – n(A ⋂ B){"\n"}
              &emsp;จะได้ n(A ⋃ B) = 30 + 50 – 20 = 60{"\n"}
              &emsp;ดังนั้น จำนวนนักเรียนทั้งหมดที่ได้รับรางวัล คือ 60 คน{"\n"}
              จำนวนนักเรียนที่ไม่ได้รับรางวัลใดๆเลย เขียนแทนด้วย n((A ⋃ B)’)
              {"\n"}
              &emsp;จาก n((A ⋃ B)’) = n(U) – n(A ⋃ B){"\n"}
              &emsp;จะได้ n((A ⋃ B)’) = 100 – 60 = 40{"\n"}
              &emsp;ดังนั้น จำนวนนักเรียนที่ไม่ได้รับรางวัลใดๆเลย คือ 40 คน
            </Text>
          </SafeAreaView>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    paddingTop: StatusBar.currentHeight,
    backgroundColor: "#FFC768",
  },
  scrollView: {
    marginHorizontal: 20,
  },
  text: {
    fontSize: 20,
    alignSelf: "center",
  },
  row: {
    backgroundColor: "#fff",
  },
  header: {
    flexDirection: "row",
    justifyContent: "center",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#D91200",
    color: "white",
    fontSize: 30,
  },
});

export default Set;
